// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Libs - Upsert Peer Data Cut should disable the add/updated button when passesGuidelines is false 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount="0"
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn legacy-primary-btn au-btn-add ml-2"
        disabled=""
        type="button"
      >
         Add 
      </button>
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;

exports[`Libs - Upsert Peer Data Cut should display the upsert data cut page with an Add button 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount="0"
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn legacy-primary-btn au-btn-add ml-2"
        type="button"
      >
         Add 
      </button>
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;

exports[`Libs - Upsert Peer Data Cut should display the upsert data cut page with an Update button 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid={[Function String]}
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount="0"
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn legacy-primary-btn au-btn-add ml-2"
        type="button"
      >
         Update 
      </button>
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;

exports[`Libs - Upsert Peer Data Cut should display untagged incumbents filter when untaggedIncumbentCount$ > 0 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Observable]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount={[Function Number]}
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex"
      >
        <label
          for="include-untagged-incs"
        >
           Include 1 incumbent that does not have location data 
          <input
            id="include-untagged-incs"
            type="checkbox"
          />
        </label>
      </div>
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn legacy-primary-btn au-btn-add ml-2"
        type="button"
      >
         Add 
      </button>
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;

exports[`Libs - Upsert Peer Data Cut should enable the add button when passesGuidelines is true 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount="0"
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn legacy-primary-btn au-btn-add ml-2"
        type="button"
      >
         Add 
      </button>
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;

exports[`Libs - Upsert Peer Data Cut should enable the update button when passesGuidelines is true 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount="0"
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn legacy-primary-btn au-btn-add ml-2"
        type="button"
      >
         Add 
      </button>
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;

exports[`Libs - Upsert Peer Data Cut should show 'Request Access' button and message when peer terms haven't been accepted 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount="0"
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      <div
        class="alert alert-mustard mb-0"
      >
        <div
          class="request-access-message mb-2"
        >
           Thank you for your interest in Peer. Peer allows you to market price with unmatched
    granularity and specificity right from within the Payfactors suite. Simply click "Request Access" and someone
    will reach out to get you started with Peer. 
        </div>
        <div
          class="d-flex justify-content-end mt-0"
        >
          <button
            class="btn btn-primary mr-2"
            type="button"
          >
            
            
            <span>
               Request Access 
            </span>
          </button>
          <button
            class="btn btn-secondary"
            type="button"
          >
            Cancel
          </button>
        </div>
      </div>
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;

exports[`Libs - Upsert Peer Data Cut should show disabled 'Access Requested' button and 'Access Requested' message when
  peer terms haven't been accepted and access has been requested 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount="0"
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      <div
        class="alert alert-mustard mb-0"
      >
        <div
          class="request-access-message mb-2"
        >
           Thank you for requesting access to Peer. A Payfactors representative will be in
    touch shortly to discuss the details of Peer and how you can become an active member of Peer. 
        </div>
        <div
          class="d-flex justify-content-end mt-0"
        >
          <button
            class="btn btn-primary mr-2"
            disabled=""
            type="button"
          >
            
            
            <span>
               Access Requested 
            </span>
          </button>
          <button
            class="btn btn-secondary"
            type="button"
          >
            Cancel
          </button>
        </div>
      </div>
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;

exports[`Libs - Upsert Peer Data Cut should show disabled 'Requesting Access' button when peer terms haven't been accepted and access
  is being requested 1`] = `
<pf-upsert-peer-data-cut
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  displayInClassicAspIframe="false"
  employeesValid$={[Function Store]}
  exchangeExplorer={[Function Object]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  isEmployeeCheckLoading$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  persistedWeightingTypeForDataCuts$={[Function Observable]}
  persistedWeightingTypeForDataCutsSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Observable]}
  selectedWeightingType={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  untaggedIncumbentCount="0"
  untaggedIncumbentCount$={[Function Observable]}
  untaggedIncumbentCountSubscription={[Function Subscriber]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userJobMatchId="0"
  userSessionId={[Function Number]}
  weightingType$={[Function Store]}
  weightingTypeSubscription={[Function Subscriber]}
>
  <pf-async-container>
    <pf-exchange-explorer>
      
      
      <div
        class="alert alert-mustard mb-0"
      >
        <div
          class="request-access-message mb-2"
        >
           Thank you for your interest in Peer. Peer allows you to market price with unmatched
    granularity and specificity right from within the Payfactors suite. Simply click "Request Access" and someone
    will reach out to get you started with Peer. 
        </div>
        <div
          class="d-flex justify-content-end mt-0"
        >
          <button
            class="btn btn-primary mr-2"
            disabled=""
            type="button"
          >
            
            <span>
              <pf-loading-indicator />
               Requesting Access... 
            </span>
            
          </button>
          <button
            class="btn btn-secondary"
            type="button"
          >
            Cancel
          </button>
        </div>
      </div>
      
      <div
        class="d-flex mr-4"
      >
        <pf-weighting-type-dropdown />
      </div>
      
      <div
        class="d-flex flex-grow-1 justify-content-end"
      >
        
      </div>
      
      <pf-guidelines-badge />
      
      <button
        class="btn btn-secondary au-btn-cancel ml-2"
        type="button"
      >
        Cancel
      </button>
    </pf-exchange-explorer>
  </pf-async-container>
</pf-upsert-peer-data-cut>
`;
