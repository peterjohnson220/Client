// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Async Container should not show the .loading-blanket, when it is not loading, and there is no loading error 1`] = `
<pf-async-container
  fullScreenLoadingMask="false"
  loading="false"
  loadingError="false"
  opacityLevel={[Function Number]}
  reload={[Function EventEmitter]}
  reloadText={[Function String]}
  showLoadingMask="false"
  showSpinner={[Function Boolean]}
  smartLoadingMask="false"
  smartLoadingMaskBuffer={[Function Number]}
  smartLoadingMaskWindowMax={[Function Number]}
  smartLoadingMaskWindowMin={[Function Number]}
  spinnerType={[Function String]}
  winRef={[Function Object]}
>
  
</pf-async-container>
`;

exports[`Async Container should show the pf-error-indicator and no reload button, when there is a loading error and hiding reload button 1`] = `
<pf-async-container
  fullScreenLoadingMask="false"
  hideReloadButton={[Function Boolean]}
  loadingError={[Function Boolean]}
  opacityLevel={[Function Number]}
  reload={[Function EventEmitter]}
  reloadText={[Function String]}
  showLoadingMask="false"
  showSpinner={[Function Boolean]}
  smartLoadingMask="false"
  smartLoadingMaskBuffer={[Function Number]}
  smartLoadingMaskWindowMax={[Function Number]}
  smartLoadingMaskWindowMin={[Function Number]}
  spinnerType={[Function String]}
  winRef={[Function Object]}
>
  <div
    class="loading-blanket loading-blanket-container no-opacity"
    ng-reflect-klass="loading-blanket"
    ng-reflect-ng-class="loading-blanket-container"
    style="opacity: 0.8;"
  >
    <div
      class="loading-blanket-center"
    >
      
      
      
      <div
        class="d-flex flex-column align-items-center alert alert-danger"
      >
        <pf-error-indicator />
        
      </div>
    </div>
  </div>
</pf-async-container>
`;

exports[`Async Container should show the pf-error-indicator and reload button, when there is a loading error 1`] = `
<pf-async-container
  fullScreenLoadingMask="false"
  loadingError={[Function Boolean]}
  opacityLevel={[Function Number]}
  reload={[Function EventEmitter]}
  reloadText={[Function String]}
  showLoadingMask="false"
  showSpinner={[Function Boolean]}
  smartLoadingMask="false"
  smartLoadingMaskBuffer={[Function Number]}
  smartLoadingMaskWindowMax={[Function Number]}
  smartLoadingMaskWindowMin={[Function Number]}
  spinnerType={[Function String]}
  winRef={[Function Object]}
>
  <div
    class="loading-blanket loading-blanket-container no-opacity"
    ng-reflect-klass="loading-blanket"
    ng-reflect-ng-class="loading-blanket-container"
    style="opacity: 0.8;"
  >
    <div
      class="loading-blanket-center"
    >
      
      
      
      <div
        class="d-flex flex-column align-items-center alert alert-danger"
      >
        <pf-error-indicator />
        
        
        <button
          class="btn btn-danger mt-3"
        >
          Reload
        </button>
      </div>
    </div>
  </div>
</pf-async-container>
`;

exports[`Async Container should show the pf-loading-indicator, when we are loading 1`] = `
<pf-async-container
  fullScreenLoadingMask="false"
  loading={[Function Boolean]}
  opacityLevel={[Function Number]}
  reload={[Function EventEmitter]}
  reloadText={[Function String]}
  showLoadingMask="false"
  showSpinner={[Function Boolean]}
  smartLoadingMask="false"
  smartLoadingMaskBuffer={[Function Number]}
  smartLoadingMaskWindowMax={[Function Number]}
  smartLoadingMaskWindowMin={[Function Number]}
  spinnerType={[Function String]}
  winRef={[Function Object]}
>
  <div
    class="loading-blanket loading-blanket-container"
    ng-reflect-klass="loading-blanket"
    ng-reflect-ng-class="loading-blanket-container"
    style="opacity: 0.8;"
  >
    <div
      class="loading-blanket-center"
    >
      
      
      <pf-loading-indicator />
      
    </div>
  </div>
</pf-async-container>
`;

exports[`Async Container should transclude 1`] = `
<ng-component>
  <pf-async-container>
    
    <h1>
      Transclusion Works!
    </h1>
  </pf-async-container>
</ng-component>
`;
