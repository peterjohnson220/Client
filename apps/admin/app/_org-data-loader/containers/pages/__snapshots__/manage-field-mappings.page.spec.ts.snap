// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ManageFieldMapperPageComponent should disable the save button when no delimiter is specified 1`] = `
<pf-autoloader-field-mapping-page
  acceptedFileExtensions={[Function Array]}
  benefitMappingComplete={[Function Boolean]}
  benefitsLoaderFeatureFlag={[Function Object]}
  cdr={[Function ViewRef_]}
  companies$={[Function Store]}
  companyMappings$={[Function Store]}
  companyMappingsLoading$={[Function Store]}
  companySelector={[Function CompanySelectorComponent]}
  companySettingsApiService={[Function MockCompanySettingsApiService]}
  configSettingsSelectorFactory={[Function MockConfigSettingsSelectorFactory]}
  configurationGroups$={[Function Store]}
  customEmployeeFields$={[Function Store]}
  customJobsfields$={[Function Store]}
  delimiter=""
  emailRecipients={[Function Array]}
  emailRecipients$={[Function Store]}
  emailRecipientsModalOpen$={[Function Store]}
  emailRecipientsRemovingError$={[Function Store]}
  emailRecipientsSavingError$={[Function Store]}
  employeeIdentifiers$={[Function Store]}
  employeeMappingComplete={[Function Boolean]}
  employeeTagsLoaderFeatureFlag={[Function Object]}
  employeeTagsMappingComplete={[Function Boolean]}
  env={[Function Object]}
  existingCompanyLoaderSettings={[Function Array]}
  featureFlagService={[Function MockAbstractFeatureFlagService]}
  fieldMappingsLoading="false"
  hasBenefitsAccess="false"
  isActive={[Function Boolean]}
  isBenefitsFullReplace={[Function Boolean]}
  isBenefitsLoadEnabled="false"
  isEmployeeTagsFullReplace={[Function Boolean]}
  isEmployeeTagsLoadEnabled="false"
  isEmployeesFullReplace={[Function Boolean]}
  isEmployeesLoadEnabled="false"
  isJobsLoadEnabled="false"
  isPaymarketsLoadEnabled="false"
  isStructureMappingsFullReplace={[Function Boolean]}
  isStructureMappingsLoadEnabled="false"
  isStructuresLoadEnabled="false"
  isSubsidiariesLoadEnabled="false"
  jobMappingComplete={[Function Boolean]}
  loadType={[Function String]}
  loaderSettings$={[Function Store]}
  loaderSettingsLoading="false"
  loaderSettingsLoading$={[Function Store]}
  mappings={[Function Array]}
  notificationService={[Function MockNotificationService]}
  orgDataAutoloaderApi="undefined"
  orgDataFilenamePatternSet$={[Function Store]}
  payfactorsBenefitsDataFields={[Function Array]}
  payfactorsEmployeeDataFields={[Function Array]}
  payfactorsEmployeeTagsDataFields={[Function Array]}
  payfactorsJobDataFields={[Function Array]}
  payfactorsPaymarketDataFields={[Function Array]}
  payfactorsStructureDataFields={[Function Array]}
  payfactorsStructureMappingDataFields={[Function Array]}
  payfactorsSubsidiariesDataFields={[Function Array]}
  paymarketMappingComplete={[Function Boolean]}
  primaryCompositeDataLoadType={[Function String]}
  publicKeyFileName="null"
  saveConfiguration$={[Function Store]}
  saveConfigurationError$={[Function Store]}
  saveConfigurationSuccess$={[Function Store]}
  savingConfiguration="false"
  selectedCompany={[Function Object]}
  selectedCompany$={[Function Store]}
  selectedCompanyBenefits$={[Function Store]}
  sftpDomainConfig$={[Function Store]}
  sftpPortConfig$={[Function Store]}
  sftpPublicKey="null"
  sftpPublicKey$={[Function Store]}
  sftpUser$={[Function Store]}
  sftpUserName="null"
  sftpUserName$={[Function Store]}
  sftpUserNameIsValid$={[Function Store]}
  showSaveErrorToast={[Function Function]}
  showSaveSuccessToast={[Function Function]}
  store={[Function Store]}
  structureMappingComplete={[Function Boolean]}
  structureMappingMappingComplete={[Function Boolean]}
  subsidiariesMappingComplete={[Function Boolean]}
  tagCategories$={[Function Store]}
  templateReferenceConstants={[Function Object]}
  toastOptions={[Function Object]}
  unsubscribe$={[Function Subject]}
  visibleLoaderOptions={[Function Object]}
>
  <pf-page-with-title-bar>
    
    Autoloader Configuration
    
    <div
      class="list-group list-group-flush"
    >
      <div
        class="list-group-item"
      >
        <div>
          <h3>
            Company
          </h3>
        </div>
        <pf-company-selector>
          <pf-async-container>
            <kendo-combobox
              class="form-control"
              id="companySearch"
            />
          </pf-async-container>
        </pf-company-selector>
      </div>
      
      <div
        class="list-group-item position-relative"
      >
        <h3>
          SFTP
        </h3>
        <div
          class="container-fluid"
        >
          <pf-sftp-account-status />
        </div>
      </div>
      
      <div
        class="list-group-item"
      >
        <h3>
          Public Key Authentication 
          <span
            class="optional"
          >
            (optional: for clients with passwordless authentication)
          </span>
        </h3>
        <div
          class="container-fluid"
        >
          <pf-public-key-auth />
        </div>
      </div>
      
      <div
        class="list-group-item"
      >
        <h3>
          Mappings
        </h3>
        <div
          class="container-fluid"
        >
          <div
            class="form-group row"
          >
            <label
              class="col-sm-1 col-form-label"
              for="delimiter"
            >
              Delimiter: 
            </label>
            <div
              class="col-sm-1"
            >
              <input
                class="form-control"
                id="delimiter"
                type="text"
              />
            </div>
          </div>
        </div>
        
        <kendo-tabstrip>
          <kendo-tabstrip-tab
            title="Pay Markets"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Jobs"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Structures"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Structure Mappings"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Employees"
          >
            
          </kendo-tabstrip-tab>
          
          <kendo-tabstrip-tab
            title="Subsidiaries"
          >
            
          </kendo-tabstrip-tab>
          
        </kendo-tabstrip>
        <div
          class="float-right m-2"
        >
          <div
            class="d-inline"
          >
            <button
              class="btn btn-primary m-2"
              disabled=""
              type="button"
            >
              Update
            </button>
          </div>
          <button
            class="btn btn-secondary"
          >
            Email Recipients
          </button>
        </div>
      </div>
    </div>
    
    <pf-email-recipients-modal
      class="float-right m-2"
    />
  </pf-page-with-title-bar>
</pf-autoloader-field-mapping-page>
`;

exports[`ManageFieldMapperPageComponent should disable the save button when not all mappings are complete 1`] = `
<pf-autoloader-field-mapping-page
  acceptedFileExtensions={[Function Array]}
  benefitMappingComplete={[Function Boolean]}
  benefitsLoaderFeatureFlag={[Function Object]}
  cdr={[Function ViewRef_]}
  companies$={[Function Store]}
  companyMappings$={[Function Store]}
  companyMappingsLoading$={[Function Store]}
  companySelector={[Function CompanySelectorComponent]}
  companySettingsApiService={[Function MockCompanySettingsApiService]}
  configSettingsSelectorFactory={[Function MockConfigSettingsSelectorFactory]}
  configurationGroups$={[Function Store]}
  customEmployeeFields$={[Function Store]}
  customJobsfields$={[Function Store]}
  delimiter={[Function String]}
  emailRecipients={[Function Array]}
  emailRecipients$={[Function Store]}
  emailRecipientsModalOpen$={[Function Store]}
  emailRecipientsRemovingError$={[Function Store]}
  emailRecipientsSavingError$={[Function Store]}
  employeeIdentifiers$={[Function Store]}
  employeeMappingComplete="false"
  employeeTagsLoaderFeatureFlag={[Function Object]}
  employeeTagsMappingComplete={[Function Boolean]}
  env={[Function Object]}
  existingCompanyLoaderSettings={[Function Array]}
  featureFlagService={[Function MockAbstractFeatureFlagService]}
  fieldMappingsLoading="false"
  hasBenefitsAccess="false"
  isActive={[Function Boolean]}
  isBenefitsFullReplace={[Function Boolean]}
  isBenefitsLoadEnabled="false"
  isEmployeeTagsFullReplace={[Function Boolean]}
  isEmployeeTagsLoadEnabled="false"
  isEmployeesFullReplace={[Function Boolean]}
  isEmployeesLoadEnabled="false"
  isJobsLoadEnabled="false"
  isPaymarketsLoadEnabled="false"
  isStructureMappingsFullReplace={[Function Boolean]}
  isStructureMappingsLoadEnabled="false"
  isStructuresLoadEnabled="false"
  isSubsidiariesLoadEnabled="false"
  jobMappingComplete={[Function Boolean]}
  loadType={[Function String]}
  loaderSettings$={[Function Store]}
  loaderSettingsLoading="false"
  loaderSettingsLoading$={[Function Store]}
  mappings={[Function Array]}
  notificationService={[Function MockNotificationService]}
  orgDataAutoloaderApi="undefined"
  orgDataFilenamePatternSet$={[Function Store]}
  payfactorsBenefitsDataFields={[Function Array]}
  payfactorsEmployeeDataFields={[Function Array]}
  payfactorsEmployeeTagsDataFields={[Function Array]}
  payfactorsJobDataFields={[Function Array]}
  payfactorsPaymarketDataFields={[Function Array]}
  payfactorsStructureDataFields={[Function Array]}
  payfactorsStructureMappingDataFields={[Function Array]}
  payfactorsSubsidiariesDataFields={[Function Array]}
  paymarketMappingComplete={[Function Boolean]}
  primaryCompositeDataLoadType={[Function String]}
  publicKeyFileName="null"
  saveConfiguration$={[Function Store]}
  saveConfigurationError$={[Function Store]}
  saveConfigurationSuccess$={[Function Store]}
  savingConfiguration="false"
  selectedCompany={[Function Object]}
  selectedCompany$={[Function Store]}
  selectedCompanyBenefits$={[Function Store]}
  sftpDomainConfig$={[Function Store]}
  sftpPortConfig$={[Function Store]}
  sftpPublicKey="null"
  sftpPublicKey$={[Function Store]}
  sftpUser$={[Function Store]}
  sftpUserName="null"
  sftpUserName$={[Function Store]}
  sftpUserNameIsValid$={[Function Store]}
  showSaveErrorToast={[Function Function]}
  showSaveSuccessToast={[Function Function]}
  store={[Function Store]}
  structureMappingComplete={[Function Boolean]}
  structureMappingMappingComplete={[Function Boolean]}
  subsidiariesMappingComplete={[Function Boolean]}
  tagCategories$={[Function Store]}
  templateReferenceConstants={[Function Object]}
  toastOptions={[Function Object]}
  unsubscribe$={[Function Subject]}
  visibleLoaderOptions={[Function Object]}
>
  <pf-page-with-title-bar>
    
    Autoloader Configuration
    
    <div
      class="list-group list-group-flush"
    >
      <div
        class="list-group-item"
      >
        <div>
          <h3>
            Company
          </h3>
        </div>
        <pf-company-selector>
          <pf-async-container>
            <kendo-combobox
              class="form-control"
              id="companySearch"
            />
          </pf-async-container>
        </pf-company-selector>
      </div>
      
      <div
        class="list-group-item position-relative"
      >
        <h3>
          SFTP
        </h3>
        <div
          class="container-fluid"
        >
          <pf-sftp-account-status />
        </div>
      </div>
      
      <div
        class="list-group-item"
      >
        <h3>
          Public Key Authentication 
          <span
            class="optional"
          >
            (optional: for clients with passwordless authentication)
          </span>
        </h3>
        <div
          class="container-fluid"
        >
          <pf-public-key-auth />
        </div>
      </div>
      
      <div
        class="list-group-item"
      >
        <h3>
          Mappings
        </h3>
        <div
          class="container-fluid"
        >
          <div
            class="form-group row"
          >
            <label
              class="col-sm-1 col-form-label"
              for="delimiter"
            >
              Delimiter: 
            </label>
            <div
              class="col-sm-1"
            >
              <input
                class="form-control"
                id="delimiter"
                type="text"
              />
            </div>
          </div>
        </div>
        
        <kendo-tabstrip>
          <kendo-tabstrip-tab
            title="Pay Markets"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Jobs"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Structures"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Structure Mappings"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Employees"
          >
            
          </kendo-tabstrip-tab>
          
          <kendo-tabstrip-tab
            title="Subsidiaries"
          >
            
          </kendo-tabstrip-tab>
          
        </kendo-tabstrip>
        <div
          class="float-right m-2"
        >
          <div
            class="d-inline"
          >
            <button
              class="btn btn-primary m-2"
              disabled=""
              type="button"
            >
              Update
            </button>
          </div>
          <button
            class="btn btn-secondary"
          >
            Email Recipients
          </button>
        </div>
      </div>
    </div>
    
    <pf-email-recipients-modal
      class="float-right m-2"
    />
  </pf-page-with-title-bar>
</pf-autoloader-field-mapping-page>
`;

exports[`ManageFieldMapperPageComponent should enable the save button when all mappings are complete AND a delimiter is specified 1`] = `
<pf-autoloader-field-mapping-page
  acceptedFileExtensions={[Function Array]}
  benefitMappingComplete={[Function Boolean]}
  benefitsLoaderFeatureFlag={[Function Object]}
  cdr={[Function ViewRef_]}
  companies$={[Function Store]}
  companyMappings$={[Function Store]}
  companyMappingsLoading$={[Function Store]}
  companySelector={[Function CompanySelectorComponent]}
  companySettingsApiService={[Function MockCompanySettingsApiService]}
  configSettingsSelectorFactory={[Function MockConfigSettingsSelectorFactory]}
  configurationGroups$={[Function Store]}
  customEmployeeFields$={[Function Store]}
  customJobsfields$={[Function Store]}
  delimiter={[Function String]}
  emailRecipients={[Function Array]}
  emailRecipients$={[Function Observable]}
  emailRecipientsModalOpen$={[Function Store]}
  emailRecipientsRemovingError$={[Function Store]}
  emailRecipientsSavingError$={[Function Store]}
  employeeIdentifiers$={[Function Store]}
  employeeMappingComplete={[Function Boolean]}
  employeeTagsLoaderFeatureFlag={[Function Object]}
  employeeTagsMappingComplete={[Function Boolean]}
  env={[Function Object]}
  existingCompanyLoaderSettings={[Function Array]}
  featureFlagService={[Function MockAbstractFeatureFlagService]}
  fieldMappingsLoading="false"
  hasBenefitsAccess="false"
  isActive={[Function Boolean]}
  isBenefitsFullReplace={[Function Boolean]}
  isBenefitsLoadEnabled="false"
  isEmployeeTagsFullReplace={[Function Boolean]}
  isEmployeeTagsLoadEnabled="false"
  isEmployeesFullReplace={[Function Boolean]}
  isEmployeesLoadEnabled="false"
  isJobsLoadEnabled="false"
  isPaymarketsLoadEnabled="false"
  isStructureMappingsFullReplace={[Function Boolean]}
  isStructureMappingsLoadEnabled="false"
  isStructuresLoadEnabled="false"
  isSubsidiariesLoadEnabled="false"
  jobMappingComplete={[Function Boolean]}
  loadType={[Function String]}
  loaderSettings$={[Function Store]}
  loaderSettingsLoading="false"
  loaderSettingsLoading$={[Function Store]}
  mappings={[Function Array]}
  notificationService={[Function MockNotificationService]}
  orgDataAutoloaderApi="undefined"
  orgDataFilenamePatternSet$={[Function Store]}
  payfactorsBenefitsDataFields={[Function Array]}
  payfactorsEmployeeDataFields={[Function Array]}
  payfactorsEmployeeTagsDataFields={[Function Array]}
  payfactorsJobDataFields={[Function Array]}
  payfactorsPaymarketDataFields={[Function Array]}
  payfactorsStructureDataFields={[Function Array]}
  payfactorsStructureMappingDataFields={[Function Array]}
  payfactorsSubsidiariesDataFields={[Function Array]}
  paymarketMappingComplete={[Function Boolean]}
  primaryCompositeDataLoadType={[Function String]}
  publicKeyFileName="null"
  saveConfiguration$={[Function Store]}
  saveConfigurationError$={[Function Store]}
  saveConfigurationSuccess$={[Function Store]}
  savingConfiguration="false"
  selectedCompany={[Function Object]}
  selectedCompany$={[Function Store]}
  selectedCompanyBenefits$={[Function Store]}
  sftpDomainConfig$={[Function Store]}
  sftpPortConfig$={[Function Store]}
  sftpPublicKey="null"
  sftpPublicKey$={[Function Store]}
  sftpUser$={[Function Store]}
  sftpUserName="null"
  sftpUserName$={[Function Store]}
  sftpUserNameIsValid$={[Function Store]}
  showSaveErrorToast={[Function Function]}
  showSaveSuccessToast={[Function Function]}
  store={[Function Store]}
  structureMappingComplete={[Function Boolean]}
  structureMappingMappingComplete={[Function Boolean]}
  subsidiariesMappingComplete={[Function Boolean]}
  tagCategories$={[Function Store]}
  templateReferenceConstants={[Function Object]}
  toastOptions={[Function Object]}
  unsubscribe$={[Function Subject]}
  visibleLoaderOptions={[Function Object]}
>
  <pf-page-with-title-bar>
    
    Autoloader Configuration
    
    <div
      class="list-group list-group-flush"
    >
      <div
        class="list-group-item"
      >
        <div>
          <h3>
            Company
          </h3>
        </div>
        <pf-company-selector>
          <pf-async-container>
            <kendo-combobox
              class="form-control"
              id="companySearch"
            />
          </pf-async-container>
        </pf-company-selector>
      </div>
      
      <div
        class="list-group-item position-relative"
      >
        <h3>
          SFTP
        </h3>
        <div
          class="container-fluid"
        >
          <pf-sftp-account-status />
        </div>
      </div>
      
      <div
        class="list-group-item"
      >
        <h3>
          Public Key Authentication 
          <span
            class="optional"
          >
            (optional: for clients with passwordless authentication)
          </span>
        </h3>
        <div
          class="container-fluid"
        >
          <pf-public-key-auth />
        </div>
      </div>
      
      <div
        class="list-group-item"
      >
        <h3>
          Mappings
        </h3>
        <div
          class="container-fluid"
        >
          <div
            class="form-group row"
          >
            <label
              class="col-sm-1 col-form-label"
              for="delimiter"
            >
              Delimiter: 
            </label>
            <div
              class="col-sm-1"
            >
              <input
                class="form-control"
                id="delimiter"
                type="text"
              />
            </div>
          </div>
        </div>
        
        <kendo-tabstrip>
          <kendo-tabstrip-tab
            title="Pay Markets"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Jobs"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Structures"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Structure Mappings"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Employees"
          >
            
          </kendo-tabstrip-tab>
          
          <kendo-tabstrip-tab
            title="Subsidiaries"
          >
            
          </kendo-tabstrip-tab>
          
        </kendo-tabstrip>
        <div
          class="float-right m-2"
        >
          <div
            class="d-inline"
          >
            <button
              class="btn btn-primary m-2"
              disabled=""
              type="button"
            >
              Update
            </button>
          </div>
          <button
            class="btn btn-secondary"
          >
            Email Recipients
          </button>
        </div>
      </div>
    </div>
    
    <pf-email-recipients-modal
      class="float-right m-2"
    />
  </pf-page-with-title-bar>
</pf-autoloader-field-mapping-page>
`;

exports[`ManageFieldMapperPageComponent should hide the field mapper when a company has not been selected 1`] = `
<pf-autoloader-field-mapping-page
  acceptedFileExtensions={[Function Array]}
  benefitMappingComplete={[Function Boolean]}
  benefitsLoaderFeatureFlag={[Function Object]}
  cdr={[Function ViewRef_]}
  companies$={[Function Store]}
  companyMappings$={[Function Store]}
  companyMappingsLoading$={[Function Store]}
  companySelector={[Function CompanySelectorComponent]}
  companySettingsApiService={[Function MockCompanySettingsApiService]}
  configSettingsSelectorFactory={[Function MockConfigSettingsSelectorFactory]}
  configurationGroups$={[Function Store]}
  customEmployeeFields$={[Function Store]}
  customJobsfields$={[Function Store]}
  delimiter={[Function String]}
  emailRecipients={[Function Array]}
  emailRecipients$={[Function Store]}
  emailRecipientsModalOpen$={[Function Store]}
  emailRecipientsRemovingError$={[Function Store]}
  emailRecipientsSavingError$={[Function Store]}
  employeeIdentifiers$={[Function Store]}
  employeeMappingComplete={[Function Boolean]}
  employeeTagsLoaderFeatureFlag={[Function Object]}
  employeeTagsMappingComplete={[Function Boolean]}
  env={[Function Object]}
  existingCompanyLoaderSettings={[Function Array]}
  featureFlagService={[Function MockAbstractFeatureFlagService]}
  fieldMappingsLoading="false"
  hasBenefitsAccess="false"
  isActive={[Function Boolean]}
  isBenefitsFullReplace={[Function Boolean]}
  isBenefitsLoadEnabled="false"
  isEmployeeTagsFullReplace={[Function Boolean]}
  isEmployeeTagsLoadEnabled="false"
  isEmployeesFullReplace={[Function Boolean]}
  isEmployeesLoadEnabled="false"
  isJobsLoadEnabled="false"
  isPaymarketsLoadEnabled="false"
  isStructureMappingsFullReplace={[Function Boolean]}
  isStructureMappingsLoadEnabled="false"
  isStructuresLoadEnabled="false"
  isSubsidiariesLoadEnabled="false"
  jobMappingComplete={[Function Boolean]}
  loadType={[Function String]}
  loaderSettings$={[Function Store]}
  loaderSettingsLoading="false"
  loaderSettingsLoading$={[Function Store]}
  mappings={[Function Array]}
  notificationService={[Function MockNotificationService]}
  orgDataAutoloaderApi="undefined"
  orgDataFilenamePatternSet$={[Function Store]}
  payfactorsBenefitsDataFields={[Function Array]}
  payfactorsEmployeeDataFields={[Function Array]}
  payfactorsEmployeeTagsDataFields={[Function Array]}
  payfactorsJobDataFields={[Function Array]}
  payfactorsPaymarketDataFields={[Function Array]}
  payfactorsStructureDataFields={[Function Array]}
  payfactorsStructureMappingDataFields={[Function Array]}
  payfactorsSubsidiariesDataFields={[Function Array]}
  paymarketMappingComplete={[Function Boolean]}
  primaryCompositeDataLoadType={[Function String]}
  publicKeyFileName="null"
  saveConfiguration$={[Function Store]}
  saveConfigurationError$={[Function Store]}
  saveConfigurationSuccess$={[Function Store]}
  savingConfiguration="false"
  selectedCompany="undefined"
  selectedCompany$={[Function Store]}
  selectedCompanyBenefits$={[Function Store]}
  sftpDomainConfig$={[Function Store]}
  sftpPortConfig$={[Function Store]}
  sftpPublicKey="null"
  sftpPublicKey$={[Function Store]}
  sftpUser$={[Function Store]}
  sftpUserName="null"
  sftpUserName$={[Function Store]}
  sftpUserNameIsValid$={[Function Store]}
  showSaveErrorToast={[Function Function]}
  showSaveSuccessToast={[Function Function]}
  store={[Function Store]}
  structureMappingComplete={[Function Boolean]}
  structureMappingMappingComplete={[Function Boolean]}
  subsidiariesMappingComplete={[Function Boolean]}
  tagCategories$={[Function Store]}
  templateReferenceConstants={[Function Object]}
  toastOptions={[Function Object]}
  unsubscribe$={[Function Subject]}
  visibleLoaderOptions={[Function Object]}
>
  <pf-page-with-title-bar>
    
    Autoloader Configuration
    
    <div
      class="list-group list-group-flush"
    >
      <div
        class="list-group-item"
      >
        <div>
          <h3>
            Company
          </h3>
        </div>
        <pf-company-selector>
          <pf-async-container>
            <kendo-combobox
              class="form-control"
              id="companySearch"
            />
          </pf-async-container>
        </pf-company-selector>
      </div>
      
      
      
    </div>
    
  </pf-page-with-title-bar>
</pf-autoloader-field-mapping-page>
`;

exports[`ManageFieldMapperPageComponent should show the field mapper when a company has been selected 1`] = `
<pf-autoloader-field-mapping-page
  acceptedFileExtensions={[Function Array]}
  benefitMappingComplete={[Function Boolean]}
  benefitsLoaderFeatureFlag={[Function Object]}
  cdr={[Function ViewRef_]}
  companies$={[Function Store]}
  companyMappings$={[Function Store]}
  companyMappingsLoading$={[Function Store]}
  companySelector={[Function CompanySelectorComponent]}
  companySettingsApiService={[Function MockCompanySettingsApiService]}
  configSettingsSelectorFactory={[Function MockConfigSettingsSelectorFactory]}
  configurationGroups$={[Function Store]}
  customEmployeeFields$={[Function Store]}
  customJobsfields$={[Function Store]}
  delimiter={[Function String]}
  emailRecipients={[Function Array]}
  emailRecipients$={[Function Store]}
  emailRecipientsModalOpen$={[Function Store]}
  emailRecipientsRemovingError$={[Function Store]}
  emailRecipientsSavingError$={[Function Store]}
  employeeIdentifiers$={[Function Store]}
  employeeMappingComplete={[Function Boolean]}
  employeeTagsLoaderFeatureFlag={[Function Object]}
  employeeTagsMappingComplete={[Function Boolean]}
  env={[Function Object]}
  existingCompanyLoaderSettings={[Function Array]}
  featureFlagService={[Function MockAbstractFeatureFlagService]}
  fieldMappingsLoading="false"
  hasBenefitsAccess="false"
  isActive={[Function Boolean]}
  isBenefitsFullReplace={[Function Boolean]}
  isBenefitsLoadEnabled="false"
  isEmployeeTagsFullReplace={[Function Boolean]}
  isEmployeeTagsLoadEnabled="false"
  isEmployeesFullReplace={[Function Boolean]}
  isEmployeesLoadEnabled="false"
  isJobsLoadEnabled="false"
  isPaymarketsLoadEnabled="false"
  isStructureMappingsFullReplace={[Function Boolean]}
  isStructureMappingsLoadEnabled="false"
  isStructuresLoadEnabled="false"
  isSubsidiariesLoadEnabled="false"
  jobMappingComplete={[Function Boolean]}
  loadType={[Function String]}
  loaderSettings$={[Function Store]}
  loaderSettingsLoading="false"
  loaderSettingsLoading$={[Function Store]}
  mappings={[Function Array]}
  notificationService={[Function MockNotificationService]}
  orgDataAutoloaderApi="undefined"
  orgDataFilenamePatternSet$={[Function Store]}
  payfactorsBenefitsDataFields={[Function Array]}
  payfactorsEmployeeDataFields={[Function Array]}
  payfactorsEmployeeTagsDataFields={[Function Array]}
  payfactorsJobDataFields={[Function Array]}
  payfactorsPaymarketDataFields={[Function Array]}
  payfactorsStructureDataFields={[Function Array]}
  payfactorsStructureMappingDataFields={[Function Array]}
  payfactorsSubsidiariesDataFields={[Function Array]}
  paymarketMappingComplete={[Function Boolean]}
  primaryCompositeDataLoadType={[Function String]}
  publicKeyFileName="null"
  saveConfiguration$={[Function Store]}
  saveConfigurationError$={[Function Store]}
  saveConfigurationSuccess$={[Function Store]}
  savingConfiguration="false"
  selectedCompany={[Function Object]}
  selectedCompany$={[Function Store]}
  selectedCompanyBenefits$={[Function Store]}
  sftpDomainConfig$={[Function Store]}
  sftpPortConfig$={[Function Store]}
  sftpPublicKey="null"
  sftpPublicKey$={[Function Store]}
  sftpUser$={[Function Store]}
  sftpUserName="null"
  sftpUserName$={[Function Store]}
  sftpUserNameIsValid$={[Function Store]}
  showSaveErrorToast={[Function Function]}
  showSaveSuccessToast={[Function Function]}
  store={[Function Store]}
  structureMappingComplete={[Function Boolean]}
  structureMappingMappingComplete={[Function Boolean]}
  subsidiariesMappingComplete={[Function Boolean]}
  tagCategories$={[Function Store]}
  templateReferenceConstants={[Function Object]}
  toastOptions={[Function Object]}
  unsubscribe$={[Function Subject]}
  visibleLoaderOptions={[Function Object]}
>
  <pf-page-with-title-bar>
    
    Autoloader Configuration
    
    <div
      class="list-group list-group-flush"
    >
      <div
        class="list-group-item"
      >
        <div>
          <h3>
            Company
          </h3>
        </div>
        <pf-company-selector>
          <pf-async-container>
            <kendo-combobox
              class="form-control"
              id="companySearch"
            />
          </pf-async-container>
        </pf-company-selector>
      </div>
      
      <div
        class="list-group-item position-relative"
      >
        <h3>
          SFTP
        </h3>
        <div
          class="container-fluid"
        >
          <pf-sftp-account-status />
        </div>
      </div>
      
      <div
        class="list-group-item"
      >
        <h3>
          Public Key Authentication 
          <span
            class="optional"
          >
            (optional: for clients with passwordless authentication)
          </span>
        </h3>
        <div
          class="container-fluid"
        >
          <pf-public-key-auth />
        </div>
      </div>
      
      <div
        class="list-group-item"
      >
        <h3>
          Mappings
        </h3>
        <div
          class="container-fluid"
        >
          <div
            class="form-group row"
          >
            <label
              class="col-sm-1 col-form-label"
              for="delimiter"
            >
              Delimiter: 
            </label>
            <div
              class="col-sm-1"
            >
              <input
                class="form-control"
                id="delimiter"
                type="text"
              />
            </div>
          </div>
        </div>
        
        <kendo-tabstrip>
          <kendo-tabstrip-tab
            title="Pay Markets"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Jobs"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Structures"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Structure Mappings"
          >
            
          </kendo-tabstrip-tab>
          <kendo-tabstrip-tab
            title="Employees"
          >
            
          </kendo-tabstrip-tab>
          
          <kendo-tabstrip-tab
            title="Subsidiaries"
          >
            
          </kendo-tabstrip-tab>
          
        </kendo-tabstrip>
        <div
          class="float-right m-2"
        >
          <div
            class="d-inline"
          >
            <button
              class="btn btn-primary m-2"
              disabled=""
              type="button"
            >
              Update
            </button>
          </div>
          <button
            class="btn btn-secondary"
          >
            Email Recipients
          </button>
        </div>
      </div>
    </div>
    
    <pf-email-recipients-modal
      class="float-right m-2"
    />
  </pf-page-with-title-bar>
</pf-autoloader-field-mapping-page>
`;
