// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Legacy Content - Peer - Upsert Data Cut should disable the add/updated button when passesGuidelines is false 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
        </div>
        
        <div
          class="button-container d-flex flex-row justify-content-between align-items-center"
        >
          
          <div
            class="flex-grow-1 d-flex justify-content-end"
          >
            
            <div
              class="buttons"
            >
              
              <button
                class="btn btn-primary btn-primary-legacy"
                disabled=""
                type="button"
              >
                Add
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;

exports[`Legacy Content - Peer - Upsert Data Cut should display the upsert data cut page with an Add button 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
        </div>
        
        <div
          class="button-container d-flex flex-row justify-content-between align-items-center"
        >
          
          <div
            class="flex-grow-1 d-flex justify-content-end"
          >
            
            <div
              class="buttons"
            >
              
              <button
                class="btn btn-primary btn-primary-legacy"
                type="button"
              >
                Add
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;

exports[`Legacy Content - Peer - Upsert Data Cut should display the upsert data cut page with an Update button 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid={[Function String]}
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
        </div>
        
        <div
          class="button-container d-flex flex-row justify-content-between align-items-center"
        >
          
          <div
            class="flex-grow-1 d-flex justify-content-end"
          >
            
            <div
              class="buttons"
            >
              
              <button
                class="btn btn-primary btn-primary-legacy"
                type="button"
              >
                Update
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;

exports[`Legacy Content - Peer - Upsert Data Cut should display untagged incumbents filter when untaggedIncumbentCount$ > 0 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Observable]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
        </div>
        
        <div
          class="button-container d-flex flex-row justify-content-between align-items-center"
        >
          
          <div
            class="d-flex"
          >
            <label
              for="include-untagged-incs"
            >
               Include 1 non geotagged employees that do not have location data? 
              <input
                id="include-untagged-incs"
                type="checkbox"
              />
            </label>
          </div>
          <div
            class="flex-grow-1 d-flex justify-content-end"
          >
            
            <div
              class="buttons"
            >
              
              <button
                class="btn btn-primary btn-primary-legacy"
                type="button"
              >
                Add
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;

exports[`Legacy Content - Peer - Upsert Data Cut should enable the add button when passesGuidelines is true 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
        </div>
        
        <div
          class="button-container d-flex flex-row justify-content-between align-items-center"
        >
          
          <div
            class="flex-grow-1 d-flex justify-content-end"
          >
            
            <div
              class="buttons"
            >
              
              <button
                class="btn btn-primary btn-primary-legacy"
                type="button"
              >
                Add
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;

exports[`Legacy Content - Peer - Upsert Data Cut should enable the update button when passesGuidelines is true 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid={[Function String]}
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
        </div>
        
        <div
          class="button-container d-flex flex-row justify-content-between align-items-center"
        >
          
          <div
            class="flex-grow-1 d-flex justify-content-end"
          >
            
            <div
              class="buttons"
            >
              
              <button
                class="btn btn-primary btn-primary-legacy"
                type="button"
              >
                Update
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;

exports[`Legacy Content - Peer - Upsert Data Cut should show 'Request Access' button and message when peer terms haven't been accepted 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
          <div
            class="alert alert-mustard mb-0"
          >
            <div
              class="request-access-message mb-2"
            >
               Thank you for your interest in Peer. Peer allows you to market price with unmatched
    granularity and specificity right from within the Payfactors suite. Simply click "Request Access" and someone
    will reach out to get you started with Peer. 
            </div>
            <div
              class="d-flex justify-content-end mt-0"
            >
              <button
                class="btn btn-primary mr-2"
                type="button"
              >
                
                
                <span>
                   Request Access 
                </span>
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
        
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;

exports[`Legacy Content - Peer - Upsert Data Cut should show disabled 'Access Requested' button and 'Access Requested' message when
  peer terms haven't been accepted and access has been requested 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Store]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
          <div
            class="alert alert-mustard mb-0"
          >
            <div
              class="request-access-message mb-2"
            >
               Thank you for requesting access to Peer. A Payfactors representative will be in
    touch shortly to discuss the details of Peer and how you can become an active member of Peer. 
            </div>
            <div
              class="d-flex justify-content-end mt-0"
            >
              <button
                class="btn btn-primary mr-2"
                disabled=""
                type="button"
              >
                
                
                <span>
                   Access Requested 
                </span>
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
        
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;

exports[`Legacy Content - Peer - Upsert Data Cut should show disabled 'Requesting Access' button when peer terms haven't been accepted and access
  is being requested 1`] = `
<pf-upsert-data-cut-page
  accessRequestedMessage={[Function String]}
  companyJobId={[Function Number]}
  companyPayMarketId={[Function Number]}
  cutGuid="null"
  employeesValid$={[Function Store]}
  guidelinesService={[Function DojGuidelinesStub]}
  hasAcceptedPeerTerms$={[Function Observable]}
  hasRequestedPeerAccess$={[Function Observable]}
  includeUntaggedIncumbents$={[Function Store]}
  initialMapMoveComplete$={[Function Store]}
  isPayMarketOverride="false"
  map="undefined"
  mapStore={[Function Store]}
  peerMapCompanies$={[Function Store]}
  peerMapCompaniesSubscription={[Function Subscriber]}
  requestPeerAccessMessage={[Function String]}
  requestingPeerAccess$={[Function Observable]}
  route={[Function Object]}
  settingsService={[Function SettingsService]}
  store={[Function Store]}
  systemFilter$={[Function Store]}
  untaggedIncumbentCount$={[Function Observable]}
  upsertDataCutPageInViewInIframe$={[Function Store]}
  upsertingDataCut$={[Function Store]}
  upsertingDataCutError$={[Function Store]}
  userSessionId={[Function Number]}
>
  <pf-async-container>
    <div
      class="d-flex h-100 w-100"
    >
      <div
        class="h-100 filters-container"
      >
        <pf-peer-data-cut-filter-sidebar />
      </div>
      <div
        class="flex-grow-1 d-flex flex-column"
      >
        <div
          class="map-container flex-grow-1 d-flex flex-column"
        >
          
          
          <div
            class="alert alert-mustard mb-0"
          >
            <div
              class="request-access-message mb-2"
            >
               Thank you for your interest in Peer. Peer allows you to market price with unmatched
    granularity and specificity right from within the Payfactors suite. Simply click "Request Access" and someone
    will reach out to get you started with Peer. 
            </div>
            <div
              class="d-flex justify-content-end mt-0"
            >
              <button
                class="btn btn-primary mr-2"
                disabled=""
                type="button"
              >
                
                <span>
                  <pf-loading-indicator />
                   Requesting Access... 
                </span>
                
              </button>
              <button
                class="btn btn-secondary"
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
        
      </div>
    </div>
  </pf-async-container>
</pf-upsert-data-cut-page>
`;
